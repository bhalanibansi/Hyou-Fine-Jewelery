<style>
  /* Accordion container styles */
.accordion {
  cursor: pointer;
  padding: 10px;
  transition: background-color 0.3s ease;
}

/* Style for the accordion title when hovered */
.accordion:hover {
  background-color: #f1f1f1;
}

/* Panel (hidden content) style */
.accordion-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
}

/* Expanded panel */
.accordion-content.expanded {
  max-height: 500px; /* Set a max height large enough to fit the content */
}

/* Rotate chevron icon when accordion is expanded */
.accordion-chevron {
  transition: transform 0.3s ease;
}
.accordion-chevron.rotate {
  transform: rotate(90deg); /* Adjust this for desired rotation */
}
.custom_acco_product_image{
  display: grid;
  grid-template: auto/auto auto;
  overflow-y: scroll;
  height: 100vh;
  gap: 15px;
}
  .product-image img{
    width: 100%;
  }
  .sliderule__wrapper .accordion{
    border-bottom: 1px solid #c2c2c2;
    display: flex;
    justify-content: space-between;
    padding: 0 var(--inner);
    height: calc(var(--item-height) - 21px);
    min-height: var(--item-height);
    align-items: center;
    font-family: MinervaModern;
  }
</style>

{%- liquid
  assign animation_name = 'drawer-items-fade'
  assign animation_duration = 500
  assign animation_delay_min = 50
  assign animation_delay_additional = 200
  assign highlight_item = highlight_item | downcase | strip_html | escape
  assign link_title_lowercase = link.title | downcase | strip_html | escape
  assign expands = false
  assign block_count = 0
  assign link_level = link_level | default: 0
  assign link_level_next = link_level | plus: 1
  assign forloop_index = forloop_index | default: 1

  if section
    assign index = index | append: ""
    for block in section.blocks
      if block.settings.position == index
        assign block_count = block_count | plus: 1
      endif
    endfor
  endif

  if link.levels > 0 or block_count > 0
    assign expands = true
    assign key = link.url | append: link.title | append: link.levels | append: index | md5
  endif

  if secondary_menu
    assign expands = false
  endif
-%}

{%- capture link_markup -%}
  {%- if link.url == "#" -%}
    <span class="sliderow__title{% if secondary_menu %} sliderow__title--secondary{% endif %}{% if highlight_item == link_title_lowercase %} sliderow__title--highlight{% endif %}" data-sliderule-close="sliderule-{{ key }}">{{ link.title | strip_html | escape }}</span>
  {%- else -%}
    <a class="sliderow__title{% if secondary_menu %} sliderow__title--secondary{% endif %}{% if highlight_item == link_title_lowercase %} sliderow__title--highlight{% endif %}" href="{{ link.url }}">{{ link.title | strip_html | escape }}
    <!-- <svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M1.51916 1.51916C-0.506386 3.5447 -0.506385 6.82875 1.51916 8.85429L8.66475 15.9999L8.67001 15.9946L8.67526 15.9999L15.8209 8.85429C17.8464 6.82875 17.8464 3.5447 15.8209 1.51916C13.8556 -0.446052 10.7058 -0.504588 8.67001 1.34355C6.63423 -0.504588 3.48436 -0.446052 1.51916 1.51916Z" fill="#FAC8CE"/>
    </svg> -->
    <svg xmlns="http://www.w3.org/2000/svg" width="6" height="11" viewBox="0 0 6 11" fill="none">
      <path d="M1 10L5.5 5.5L1 1" stroke="black" stroke-linecap="square" stroke-linejoin="round"/>
    </svg> 
    </a>
  {%- endif -%}
{%- endcapture -%}

<div class="sliderule__wrapper{% if secondary_menu %} sliderule__wrapper--secondary{% endif %}">
  {%- if expands -%}
    <button class="sliderow" type="button"
      data-animates="{{ link_level }}"
      data-animation="{{ animation_name }}"
      data-animation-delay="{{ animation_delay | plus: animation_delay_additional }}"
      data-animation-duration="{{ animation_duration }}"
      data-sliderule-open="sliderule-{{ key }}">
      <span class="sliderow__title{% if secondary_menu %} sliderow__title--secondary{% endif %}{% if highlight_item == link_title_lowercase %} sliderow__title--highlight{% endif %}">
        {{ link.title | strip_html | escape }}
        <span class="sliderule__chevron--right test">
         {% comment %} {%- render 'icon-arrow-right' -%} {% endcomment %}
          <svg xmlns="http://www.w3.org/2000/svg" width="6" height="11" viewBox="0 0 6 11" fill="none">
            <path d="M1 10L5.5 5.5L1 1" stroke="black" stroke-linecap="square" stroke-linejoin="round"/>
          </svg> 
          <span class="visually-hidden">{{ 'general.accessibility.show_menu' | t }}</span>
        </span>
      </span>
    </button>

    <div class="mobile__menu__dropdown sliderule__panel"
      id="sliderule-{{ key }}"
      data-sliderule="{{ link_level_next }}"
      data-scroll-lock-scrollable>
      <div class="sliderow sliderow--back"
        data-animates="{{ link_level_next }}"
        data-animation="{{ animation_name }}"
        data-animation-delay="{{ animation_delay | divided_by: forloop_index | at_least: animation_delay_min }}"
        data-animation-duration="{{ animation_duration }}">
        <button class="sliderow__back-button" type="button" data-sliderule-close="sliderule-{{ key }}">
          <span class="sliderule__chevron--left">
           {% comment %} {%- render 'icon-arrow-left' -%} {% endcomment %}    
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#c2c2c2" stroke-width="2" stroke-linecap="round" stroke-linejoin="arcs"><path d="M15 18l-6-6 6-6"></path></svg>
            <span class="visually-hidden">{{ 'general.accessibility.exit_menu' | t }}</span>
          </span>
        </button>
        {{ link_markup }}
      </div>
      <div class="sliderow__links" data-links>
        {%- for link in link.links -%}
          {% comment %}
            Handle case where multiple child menus
            have an item called 'sale' in position 1
          {% endcomment %}
          {%- assign index_recursive = index | append: 'x' | append: forloop.index -%}
          {%- assign animation_delay = 50 | times: forloop.index -%}

          {%- render 'nav-item-mobile', link: link, index: index_recursive, forloop_index: forloop.index, link_level: link_level_next, highlight_item: highlight_item, animation_delay: animation_delay -%}
        {%- endfor -%}

        {% comment %} Render block content {% endcomment %}
        {%- if section and section.blocks.size > 0 -%}
          {%- assign header_blocks = '' -%}
          {%- assign animation_delay_next = 50 -%}

          {%- unless link.links.size > 0 -%}
            {%- assign animation_delay = animation_delay | divided_by: forloop_index | at_least: animation_delay_min | minus: animation_delay_next -%}
          {%- endunless -%}

          {%- assign animation_delay = animation_delay | plus: animation_delay_additional -%}

          {% for block in section.blocks %}
            {%- if block.settings.position == index -%}
              {%- assign animation_delay = animation_delay | plus: animation_delay_next -%}

              {%- capture header_blocks -%}
                {{ header_blocks }}

                {% render 'header-block', block: block, link_level_next: link_level_next, animation_delay: animation_delay, is_mobile: true %}
              {%- endcapture -%}
            {%- endif -%}
          {% endfor %}

          {%- if header_blocks != '' -%}
            <div class="sliderule-grid blocks-{{ block_count }}">
              {{ header_blocks }}
            </div>
          {%- endif -%}
        {%- endif -%}
      </div>
    </div>
  {%- else -%}
    {% comment %} Single menu item, no nesting {% endcomment %}
    
   {% if link.title == "New Arrivals" %}
    <div class="accordion" onclick="toggleAccordion(this)">
     <a href="{{ link.url }}">{{ link.title }}</a>
      <span class="accordion-chevron">
        <svg xmlns="http://www.w3.org/2000/svg" width="6" height="11" viewBox="0 0 6 11" fill="none">
          <path d="M1 10L5.5 5.5L1 1" stroke="black" stroke-linecap="square" stroke-linejoin="round"></path>
        </svg>
      </span>
    </div>
    <div class="accordion-content custom_acco_product_image">     
     {% assign new_arrivals_collection = collections['new-arrivals'] %} <!-- Replace 'new-arrivals' with your actual collection handle -->
      {% if new_arrivals_collection.products.size > 0 %}
        {% for product in new_arrivals_collection.products limit: 16 %}
          <div class="product-image">
            <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
          </div>
        {% endfor %}
      {% else %}
        <p>No products available in the "New Arrivals" collection.</p> <!-- Only show this if no products are available -->
      {% endif %}
    </div>
   {% else %}
    <div class="sliderow"
      role="button"
      data-animates="{{ link_level }}"
      data-animation="{{ animation_name }}"
      data-animation-delay="{{ animation_delay | plus: animation_delay_additional }}"
      data-animation-duration="{{ animation_duration }}">
      {{ link_markup }}
    </div>
 {% endif %}
  {%- endif -%}
</div>

<script>
 function toggleAccordion(element) {
  var content = element.nextElementSibling;
  var chevron = element.querySelector('.accordion-chevron');  
  if (content.classList.contains('expanded')) {
    content.classList.remove('expanded');
    chevron.classList.remove('rotate');
  } else {
    content.classList.add('expanded');
    chevron.classList.add('rotate');
  }
}
</script>